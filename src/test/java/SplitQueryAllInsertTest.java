
// Generated by CodiumAI

import main.FileSQL;

import org.junit.Assert;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.List;

public class SplitQueryAllInsertTest {

    String fileNome = "production_2024-01-05_06h25m.sql";
    /**Metodo divide le insert per un limite di 30 insert.
       Crea una lista di query di insert into con l'array di stringhe di insert*/
    @Test
    public void test_splitQueryAllTabIssuesInsert_Max30Inserts() throws IOException {
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();

        // Act
        fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        List<String> finalQueries = fileSQL.getListaFinalQueries();
        System.out.println(finalQueries);
        fileSQL.close();
    }

    /**Metodo divide le insert per un limite di 30 insert.
       Crea una lista di query di insert into con l'array di stringhe di insert
       e scrive la lista di query in un file*/
    @Test
    public void testSplitQueryAllInsertTabIssuesMax30InsertsScriviRisultatoInFile() throws IOException {
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();

        // Act
        fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        List<String> finalQueries = fileSQL.getListaFinalQueries();
        System.out.println(finalQueries);
        fileSQL.scriviListaFinalQueriesTabIssuesInFile();
        fileSQL.close();
    }

    @Test
    public void testSplitQueryAllInsertTabIssuesMax30InsertsStampaStringa() throws IOException {
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();

        // Act
        fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        List<String> finalQueries = fileSQL.getListaFinalQueries();
        fileSQL.stampaQueriesFinali(finalQueries);
    }
    @Test
    public void testSplitQueryAllInsertTabIssuesMax30InsertsStampaNumeriInsertQueryNonOrdinata() throws IOException {
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();

        // Act
        fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());

        fileSQL.getListaIdInsertFileTabIssues();
        fileSQL.getListaDataCreazioneBugInsertFileTabIssues();
    }
    @Test
    public void testSplitQueryAllInsertTabIssuesCheckListeIDDataCreazioneBugInsertFileOriginaleConScriptTabIssues() throws IOException{
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();

        // Act
        List<String> listaRigheInsertSplittedTabIssues = fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        List<String> listaRigheInsertFileTabIssues= fileSQL.splitListaRigheInsertQueryOrdinate();

        System.out.println(fileSQL.checkQueryValuesFromDumpEqualsQueryValuesSplittate(listaRigheInsertFileTabIssues, listaRigheInsertSplittedTabIssues));
    }

    @Test
    public void testCheckIDDataCreazioneBugQueryTabIssuesIfEqualsStampaFileScript() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();
        List<String> listaValuesRigheInsertFileTabIssues = fileSQL.splitStringaQueryAllInsertFile(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        List<String> listaValuesRigheInsertSplittedTabIssues = fileSQL.splitListaRigheInsertQueryOrdinate();

        if(fileSQL.checkQueryValuesFromDumpEqualsQueryValuesSplittate(listaValuesRigheInsertFileTabIssues, listaValuesRigheInsertSplittedTabIssues)){
            fileSQL.scriviListaFinalQueriesTabIssuesInFile();
            fileSQL.close();
        }
    }
    @Test
    public void testCreaFileDumpCorretto() throws IOException {
        // Arrange
        FileSQL fileSQL = new FileSQL(fileNome);
        // Act
        fileSQL.creaDumpCorretto();
        // Assert
        File file = new File("src/main/resources/files/prova_dump_nuovo.sql");
        Assert.assertTrue(file.exists());
        // Clean up
        System.out.println(file.delete());
    }
}
