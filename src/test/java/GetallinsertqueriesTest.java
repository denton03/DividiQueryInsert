
// Generated by CodiumAI

import main.FileSQL;

import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.*;

public class GetallinsertqueriesTest {

    String fileNome = "redmine_production_2024-01-05_06h25m.Friday.sql";
    // Il metodo legge il file ed estrae la QUERY a linea 858 se esiste e inizia con INSERT.
    @Test
    public void test_extract_insert_query_at_line_858() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        System.out.println(fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        assertEquals("", "expected_query", fileSQL.getQueryAllInsertTabIssuesNonOrdinate());

        fileSQL.close();
    }
    /*@Test
    public void testQueryOttenutaUgualeQueryOriginale() throws IOException{
        FileSQL fileSQL = new FileSQL();
        fileSQL.getAllInsertQueries();
        assertEquals(fileSQL.getOGQuery(),  fileSQL.getQueryAllInsert());
        fileSQL.close();
    }*/

    // Il metodo ritorna 0 senza lanciare eccezioni se il file esiste e ha almeno 858 righe
    @Test
    public void test_return_without_exceptions_if_file_exists_and_has_at_least_858_lines() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();
        fileSQL.close();
    }

    // File esiste ma ha meno di 858 righe
    @Test
    public void test_file_exists_but_has_less_than_858_lines() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();
        assertNull("queryAllInsert variable", fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        fileSQL.close();
    }

    // File esiste ma non ha una QUERY INSERT a linea 858
    @Test
    public void test_file_exists_but_does_not_have_insert_query_at_line_858() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();
        assertNull("queryAllInsert variable", fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        fileSQL.close();
    }
    // File non esiste.
    @Test
    public void test_file_does_not_exist() throws IOException {
        FileSQL fileSQL = new FileSQL(fileNome);
        fileSQL.getAllInsertQueriesFileNonSplittateTabIssues();
        assertNull("queryAllInsert variable", fileSQL.getQueryAllInsertTabIssuesNonOrdinate());
        fileSQL.close();
    }

}